// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/jenkins-x/jx/pkg/auth (interfaces: ConfigService)

package auth_test

import (
	auth "github.com/jenkins-x/jx/pkg/auth"
	pegomock "github.com/petergtz/pegomock"
	"reflect"
	"time"
)

type MockConfigService struct {
	fail func(message string, callerSkip ...int)
}

func NewMockConfigService(options ...pegomock.Option) *MockConfigService {
	mock := &MockConfigService{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockConfigService) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockConfigService) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockConfigService) Config() (*auth.Config, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockConfigService().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("Config", params, []reflect.Type{reflect.TypeOf((**auth.Config)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *auth.Config
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*auth.Config)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockConfigService) LoadConfig() error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockConfigService().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("LoadConfig", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockConfigService) SaveConfig() error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockConfigService().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("SaveConfig", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockConfigService) SetConfig(_param0 *auth.Config) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockConfigService().")
	}
	params := []pegomock.Param{_param0}
	pegomock.GetGenericMockFrom(mock).Invoke("SetConfig", params, []reflect.Type{})
}

func (mock *MockConfigService) VerifyWasCalledOnce() *VerifierMockConfigService {
	return &VerifierMockConfigService{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockConfigService) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *VerifierMockConfigService {
	return &VerifierMockConfigService{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockConfigService) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *VerifierMockConfigService {
	return &VerifierMockConfigService{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockConfigService) VerifyWasCalledEventually(invocationCountMatcher pegomock.Matcher, timeout time.Duration) *VerifierMockConfigService {
	return &VerifierMockConfigService{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockConfigService struct {
	mock                   *MockConfigService
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockConfigService) Config() *MockConfigService_Config_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "Config", params, verifier.timeout)
	return &MockConfigService_Config_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockConfigService_Config_OngoingVerification struct {
	mock              *MockConfigService
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockConfigService_Config_OngoingVerification) GetCapturedArguments() {
}

func (c *MockConfigService_Config_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierMockConfigService) LoadConfig() *MockConfigService_LoadConfig_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "LoadConfig", params, verifier.timeout)
	return &MockConfigService_LoadConfig_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockConfigService_LoadConfig_OngoingVerification struct {
	mock              *MockConfigService
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockConfigService_LoadConfig_OngoingVerification) GetCapturedArguments() {
}

func (c *MockConfigService_LoadConfig_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierMockConfigService) SaveConfig() *MockConfigService_SaveConfig_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "SaveConfig", params, verifier.timeout)
	return &MockConfigService_SaveConfig_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockConfigService_SaveConfig_OngoingVerification struct {
	mock              *MockConfigService
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockConfigService_SaveConfig_OngoingVerification) GetCapturedArguments() {
}

func (c *MockConfigService_SaveConfig_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierMockConfigService) SetConfig(_param0 *auth.Config) *MockConfigService_SetConfig_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "SetConfig", params, verifier.timeout)
	return &MockConfigService_SetConfig_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockConfigService_SetConfig_OngoingVerification struct {
	mock              *MockConfigService
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockConfigService_SetConfig_OngoingVerification) GetCapturedArguments() *auth.Config {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *MockConfigService_SetConfig_OngoingVerification) GetAllCapturedArguments() (_param0 []*auth.Config) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*auth.Config, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*auth.Config)
		}
	}
	return
}
