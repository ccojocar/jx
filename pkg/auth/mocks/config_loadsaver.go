// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/jenkins-x/jx/pkg/auth (interfaces: ConfigLoadSaver)

package auth_test

import (
	auth "github.com/jenkins-x/jx/pkg/auth"
	pegomock "github.com/petergtz/pegomock"
	"reflect"
	"time"
)

type MockConfigLoadSaver struct {
	fail func(message string, callerSkip ...int)
}

func NewMockConfigLoadSaver(options ...pegomock.Option) *MockConfigLoadSaver {
	mock := &MockConfigLoadSaver{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockConfigLoadSaver) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockConfigLoadSaver) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockConfigLoadSaver) LoadConfig() (*auth.Config, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockConfigLoadSaver().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("LoadConfig", params, []reflect.Type{reflect.TypeOf((**auth.Config)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *auth.Config
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*auth.Config)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockConfigLoadSaver) SaveConfig(_param0 *auth.Config) error {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockConfigLoadSaver().")
	}
	params := []pegomock.Param{_param0}
	result := pegomock.GetGenericMockFrom(mock).Invoke("SaveConfig", params, []reflect.Type{reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(error)
		}
	}
	return ret0
}

func (mock *MockConfigLoadSaver) VerifyWasCalledOnce() *VerifierMockConfigLoadSaver {
	return &VerifierMockConfigLoadSaver{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockConfigLoadSaver) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *VerifierMockConfigLoadSaver {
	return &VerifierMockConfigLoadSaver{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockConfigLoadSaver) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *VerifierMockConfigLoadSaver {
	return &VerifierMockConfigLoadSaver{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockConfigLoadSaver) VerifyWasCalledEventually(invocationCountMatcher pegomock.Matcher, timeout time.Duration) *VerifierMockConfigLoadSaver {
	return &VerifierMockConfigLoadSaver{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockConfigLoadSaver struct {
	mock                   *MockConfigLoadSaver
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockConfigLoadSaver) LoadConfig() *MockConfigLoadSaver_LoadConfig_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "LoadConfig", params, verifier.timeout)
	return &MockConfigLoadSaver_LoadConfig_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockConfigLoadSaver_LoadConfig_OngoingVerification struct {
	mock              *MockConfigLoadSaver
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockConfigLoadSaver_LoadConfig_OngoingVerification) GetCapturedArguments() {
}

func (c *MockConfigLoadSaver_LoadConfig_OngoingVerification) GetAllCapturedArguments() {
}

func (verifier *VerifierMockConfigLoadSaver) SaveConfig(_param0 *auth.Config) *MockConfigLoadSaver_SaveConfig_OngoingVerification {
	params := []pegomock.Param{_param0}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "SaveConfig", params, verifier.timeout)
	return &MockConfigLoadSaver_SaveConfig_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockConfigLoadSaver_SaveConfig_OngoingVerification struct {
	mock              *MockConfigLoadSaver
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockConfigLoadSaver_SaveConfig_OngoingVerification) GetCapturedArguments() *auth.Config {
	_param0 := c.GetAllCapturedArguments()
	return _param0[len(_param0)-1]
}

func (c *MockConfigLoadSaver_SaveConfig_OngoingVerification) GetAllCapturedArguments() (_param0 []*auth.Config) {
	params := pegomock.GetGenericMockFrom(c.mock).GetInvocationParams(c.methodInvocations)
	if len(params) > 0 {
		_param0 = make([]*auth.Config, len(params[0]))
		for u, param := range params[0] {
			_param0[u] = param.(*auth.Config)
		}
	}
	return
}
