// Code generated by pegomock. DO NOT EDIT.
// Source: github.com/jenkins-x/jx/pkg/auth (interfaces: ConfigLoader)

package auth_test

import (
	auth "github.com/jenkins-x/jx/pkg/auth"
	pegomock "github.com/petergtz/pegomock"
	"reflect"
	"time"
)

type MockConfigLoader struct {
	fail func(message string, callerSkip ...int)
}

func NewMockConfigLoader(options ...pegomock.Option) *MockConfigLoader {
	mock := &MockConfigLoader{}
	for _, option := range options {
		option.Apply(mock)
	}
	return mock
}

func (mock *MockConfigLoader) SetFailHandler(fh pegomock.FailHandler) { mock.fail = fh }
func (mock *MockConfigLoader) FailHandler() pegomock.FailHandler      { return mock.fail }

func (mock *MockConfigLoader) LoadConfig() (*auth.Config, error) {
	if mock == nil {
		panic("mock must not be nil. Use myMock := NewMockConfigLoader().")
	}
	params := []pegomock.Param{}
	result := pegomock.GetGenericMockFrom(mock).Invoke("LoadConfig", params, []reflect.Type{reflect.TypeOf((**auth.Config)(nil)).Elem(), reflect.TypeOf((*error)(nil)).Elem()})
	var ret0 *auth.Config
	var ret1 error
	if len(result) != 0 {
		if result[0] != nil {
			ret0 = result[0].(*auth.Config)
		}
		if result[1] != nil {
			ret1 = result[1].(error)
		}
	}
	return ret0, ret1
}

func (mock *MockConfigLoader) VerifyWasCalledOnce() *VerifierMockConfigLoader {
	return &VerifierMockConfigLoader{
		mock:                   mock,
		invocationCountMatcher: pegomock.Times(1),
	}
}

func (mock *MockConfigLoader) VerifyWasCalled(invocationCountMatcher pegomock.Matcher) *VerifierMockConfigLoader {
	return &VerifierMockConfigLoader{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
	}
}

func (mock *MockConfigLoader) VerifyWasCalledInOrder(invocationCountMatcher pegomock.Matcher, inOrderContext *pegomock.InOrderContext) *VerifierMockConfigLoader {
	return &VerifierMockConfigLoader{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		inOrderContext:         inOrderContext,
	}
}

func (mock *MockConfigLoader) VerifyWasCalledEventually(invocationCountMatcher pegomock.Matcher, timeout time.Duration) *VerifierMockConfigLoader {
	return &VerifierMockConfigLoader{
		mock:                   mock,
		invocationCountMatcher: invocationCountMatcher,
		timeout:                timeout,
	}
}

type VerifierMockConfigLoader struct {
	mock                   *MockConfigLoader
	invocationCountMatcher pegomock.Matcher
	inOrderContext         *pegomock.InOrderContext
	timeout                time.Duration
}

func (verifier *VerifierMockConfigLoader) LoadConfig() *MockConfigLoader_LoadConfig_OngoingVerification {
	params := []pegomock.Param{}
	methodInvocations := pegomock.GetGenericMockFrom(verifier.mock).Verify(verifier.inOrderContext, verifier.invocationCountMatcher, "LoadConfig", params, verifier.timeout)
	return &MockConfigLoader_LoadConfig_OngoingVerification{mock: verifier.mock, methodInvocations: methodInvocations}
}

type MockConfigLoader_LoadConfig_OngoingVerification struct {
	mock              *MockConfigLoader
	methodInvocations []pegomock.MethodInvocation
}

func (c *MockConfigLoader_LoadConfig_OngoingVerification) GetCapturedArguments() {
}

func (c *MockConfigLoader_LoadConfig_OngoingVerification) GetAllCapturedArguments() {
}
